#!/bin/bash
#set -euxo pipefail
PWD=$(pwd)
images=$1
resultsdir=$PWD"/$2"
docker login $REGISTRY_ARTIFACTORY -u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD 


mkdir -p $resultsdir
REGISTRY_DOCKERHUB=""
ANCHORE_USER="admin"
ANCHORE_PASSWORD="foobar"
export ANCHORE_CLI_USER=$ANCHORE_USER ANCHORE_CLI_PASS=$ANCHORE_PASSWORD
DOCKER_IP=$(ifconfig docker0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
. ../../../config

mkdir -p $resultsdir/anchore
function anchore_scan_image {
    cve=$3
    anchore-cli image add $1
    anchore-cli image wait $1
    anchore-cli image vuln  --json $1 all > $resultsdir/anchore/$2.json
    python report.py anchore  $resultsdir/anchore/$2.json $cve $1 &
}    

mkdir -p $resultsdir/xray
function xray_scan_image {
    #wait 30 #for the image to get picked up
    # curl -u admin:My9Wf5Jr9Yk3De -X POST -d '{"paths":["artifactory_saas/repo/debian/latest"]}' --header "Content-Type: application/json" https://fawkes-xray.jfrog.io/api/v1/summary/artifact > xrayexample.json
    curl -u $ARTIFACTORY_USER:$ARTIFACTORY_PASSWORD -X POST -d '{"paths":["/default/testrepo/testimage/'$tag'"]}' --header "Content-Type: application/json" $XRAY_URL/xray/api/v1/summary/artifact > $resultsdir/xray/$2.json
    python report.py xray  $resultsdir/xray/$2.json $cve $1 &
}

mkdir -p $resultsdir/clair
function clair_scan_image {
    cve=$3
    docker pull $1
    ../../../clair/clair-scan -r $resultsdir/clair/$2.json --ip=$DOCKER_IP $1 
    python report.py clair  $resultsdir/clair/$2.json $cve $1 &
}

mkdir -p $resultsdir/aqua
function aqua_scan_image {
    cve=$3
    MICROSCANNER_TOKEN=$MICROSCANNER_TOKEN ../../../microscanner/microscanner-wrapper/scan.sh "$1"  | sed "/The command '.*/d" | sed -n '/assurance policies/,$p' | sed '1d' | sed '$d' >  $resultsdir/aqua/$2.json
    sed -i "1s/.*/{/"  $resultsdir/aqua/$2.json
    python report.py aqua  $resultsdir/aqua/$2.json $cve $1 &
}

mkdir -p $resultsdir/snyk
function snyk_scan_image {
    cve=$3
	docker pull $1
	snyk test --json --docker $1 > $resultsdir/snyk/$2.json
    python report.py snyk  $resultsdir/snyk/$2.json $cve $1 &
}

mkdir -p $resultsdir/anchore_with_dockerfile
function anchore_scan_image_dockerfile {
    cve=$3
    anchore-cli image add --dockerfile=$4 --force $1
    anchore-cli image wait $1
    anchore-cli --json image vuln $1 all > $resultsdir/anchore_with_dockerfile/$2.json
    python report.py anchore  $resultsdir/anchore_with_dockerfile/$2.json $cve $1 &
}    

mkdir -p $resultsdir/snyk_with_dockerfile
function snyk_scan_image_dockerfile {
    cve=$3
	docker pull $1
	snyk test --json --docker --file=$4 $1 > $resultsdir/snyk_with_dockerfile/$2.json
    python report.py snyk  $resultsdir/snyk_with_dockerfile/$2.json $cve $1 & 
}

function snyk_scan_images {
while IFS= read -r line; do
    tokenized=( $line )
    image=${tokenized[0]}
    cve=${tokenized[1]}
    dockerfile=${tokenized[2]}
    outfile=$(echo $image | sed 's./._.g')
    snyk_scan_image $image $outfile $cve
    if test -f "$dockerfile"; then
        snyk_scan_image_dockerfile $image $outfile $cve $dockerfile  
    fi
    wait
done < $1
}

function anchore_scan_images {
while IFS= read -r line; do
    tokenized=( $line )
    image=${tokenized[0]}
    cve=${tokenized[1]}
    dockerfile=${tokenized[2]}
    outfile=$(echo $image | sed 's./._.g')
    anchore_scan_image $image $outfile 
    if test -f "$dockerfile"; then
        anchore_scan_image_dockerfile $image $outfile $cve $dockerfile 
    fi
    wait
done < $1
}

function xray_scan_images {
while IFS= read -r line; do
    tokenized=( $line )
    image=${tokenized[0]}
    cve=${tokenized[1]}
    outfile=$(echo $image | sed 's./._.g') 
    tag=$(echo $image | sed 's+.*:++')
    docker pull $image
    docker tag $image $REGISTRY_ARTIFACTORY/testimage:$tag
    docker push $REGISTRY_ARTIFACTORY/testimage:$tag
done < $1
while IFS= read -r line; do
    tokenized=( $line )
    image=${tokenized[0]}
    cve=${tokenized[1]}
    outfile=$(echo $image | sed 's./._.g')
    xray_scan_image $image $outfile $cve
done < $1
}

function clair_scan_images {
while IFS= read -r line; do
    tokenized=( $line )
    image=${tokenized[0]}
    cve=${tokenized[1]}
    outfile=$(echo $image | sed 's./._.g')
    clair_scan_image $image $outfile $cve
done < $1
}

function aqua_scan_images {
while IFS= read -r line; do
    tokenized=( $line )
    image=${tokenized[0]}
    cve=${tokenized[1]}
    outfile=$(echo $image | sed 's./._.g')
    aqua_scan_image $image $outfile $cve
done < $1
}


snyk_scan_images $images &
anchore_scan_images $images &
xray_scan_images $images &
clair_scan_images $images &
aqua_scan_images $images &
wait 